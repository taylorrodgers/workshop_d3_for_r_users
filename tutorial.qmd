---
title: "Workshop: Intro to D3 for R Users"
author: "Taylor Rodgers"
format: 
  html:
    include-in-header:
      - text: |
          <style> @import url('https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Source+Sans+3:ital,wght@0,200..900;1,200..900&display=swap'); </style>
editor: visual
execute:
  warning: false
  message: false
---

```{r, echo = FALSE}
### Load data sets and all related functions
library(freeStateData)
devtools::load_all()

### Produce JSON file
data(us_treasury_data_1890s)
jGold <- util_generate_jGold(us_treasury_data_1890s)
rm(us_treasury_data_1890s)
```

## Intro

asgaga

```{r, echo = FALSE}
plot_gold_viz_bar(jGold, directory_path = "D3_original")
plot_gold_viz_line(jGold,  directory_path = "D3_original")
```

## Required Knowledge

asgasg

## Required Packages

```{r, eval = FALSE}
# CRAN Packages
install.packages("dplyr")
install.packages("jsonlite")
install.packages("r2d3")
install.packages("shiny")
install.packages("bslib")
install.packages("stringr")
install.packages("tidyr")
install.packages("devtools")

# GitHub Package
devtools::install_github("https://github.com/Free-State-Analytics/freeStateData")
```

## Required Workspace

Download this git repo or download this file and open it on Posit.cloud

## Our Mockups

asgags

## Section One: Building a Base

### Foundation

margins,

dimensions (range and domain)

aesthetics (axis ticks, tick marks, etc.)

### Create Base Script

Create an empty file in `D3/` called `viz_gold_base.js`. This script will pull together and execute the other modules we'll create. It'll also house scripts that we develop along the way, before modularization.

### Add Margins

At the top of `viz_gold_base.js`, add binding that defines the visualization's margins. This binding will be used frequently in most of our future modules.

```{js, eval = FALSE}
// Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};
```

### Add X-Axis Dimension

Below the margin binding in `viz_gold_base.js`, create two bindings to define the min and max dates.

```{js, eval = FALSE}
// Define y-axis min and max values
const x_min = new Date("1892-10-01"); 
const x_max = new Date("1893-12-01");
```

This could be modified to take dynamic inputs (i.e., whatever minimal or maximum dates are available in the data). This tutorial simply hard codes these values for ease-of-learning.

Next, create a binding for the x-axis dimensions. This should go below your `x_min` and `x_max` in `viz_gold_base.js`.

```{js, eval = FALSE}
// Define dimension for x-axis
const x_dimension = d3.scaleUtc()
  .domain([x_min, x_max])
  .range([margin.left, width - margin.right]);
```

A few things about the script above:

-   `domain` maps data to the axis used by our future visual elements, which is why it takes `x_min` and`x_max` as inputs.

-   `range` defines the placement of this axis in relation to the overall SVG, which is why it takes into consideration `margin` and `width`.

-   `scaleUtc` is used when the axis relates to date or time, but D3 uses other functions for other data types.

-   `x_dimension` only defined the dimensionality. Normally, most D3 scripts in tutorials will refer to this simple as `x`. I think it's better to be more explicit to make the code more readable.

### Add X-Axis Aesthetics

After defining the visualization's dimensionality, the axis itself needs to be visually displayed (at least for our purposes).

Below `x_dimension` in the `viz_gold_base.js` file, create a new binding for the aesthetic representation.

```{js, eval = FALSE}
// Define aesthetics for x-axis
const x_aesthetic = d3.axisBottom(x_dimension);
```

In our new `x_aesthetic` binding, we use the `x_dimension` to create an x-axis with `axisBottom`.

We'll come back to this binding shortly. First though, append a "g" element to the SVG, using this new `x_aesthetic` binding to dictate its placement.

```{js, eval = FALSE}
// Append x-axis to SVG
svg.append("g")
  .attr("transform", `translate(0, ${height - margin.bottom})`)
  .call(x_aesthetic);
```

A few things about the script above:

-   `svg` is the parent tag that contains our entire visualization. `svg.append("g")` would result in a tag `<svg><g>...</g>...</svg>`
-   Notice that a `transform` attribute is applied to the the new "g" element. This transforms the placement of the "g" along the y-axis. Why would our x-axis need to take into consideration the y-axis? Well, because `x_dimension` does not pass instruction to our `x_aesthetic` on any y-related parameters, we need to inform the "g" element to take into account the height and margin when placing the visual representation of our axis.

You can now preview this in your Viewer window. Run `plot_gold_viz_bar(jGold)` to see the axis appear.

### Improve X-Axis Aesthetics

Right now, the x-axis displayed on the visualization looks plain.

There are two places to change the look-and-feel of the axis.

The **first** relates to the tick labeling. That is, do you want the tick marks to be longer, more prominent, etc.

For example, you can change the [date format](https://d3-wiki.readthedocs.io/zh-cn/master/Time-Formatting/) with a combination of `tickFormat` and `utcFormat`.

```{js, eval = FALSE}
// Define aesthetics for x-axis
const x_aesthetic = d3.axisBottom(x_dimension)
  .tickFormat(d3.utcFormat("%y %b"));
```

The **second** relates to color, font size, etc. That is, do you want to change the style arguments for the "g" tag that generates the visual representation of the axis.

For example, you could make the axis "blue" using `style("fill: blue")`

```{js, eval = FALSE}
// Append x-axis to SVG
svg.append("g")
  .attr("transform", `translate(0, ${height - margin.bottom})`)
  .style("fill", "blue")
  .call(x_aesthetic);
```

Fortunately, we have a `.css` file already available and loaded. There is a dedicated class called `axis` that defines the style arguments we want to use.

```{css, eval = FALSE}
.axis {
  color: #373735;
  font-weight: 400;
  font-size: .75em;
  font-family: "Source Sans 3";
}
```

Instead of passing `style`, you can pass `attr("class", "axis")`.

```{js, eval = FALSE}
// Append x-axis to SVG
svg.append("g")
  .attr("transform", `translate(0, ${height - margin.bottom})`)
  .attr("class", "axis")
  .call(x_aesthetic);
```

CSS classes make D3 aesthetics far easier to manage, because the developer would need to copy `style` arguments repeatedly for aesthetic consistency.

One thing to note, `r2d3` does not include the `font-family` provided in a CSS, even if properly linked, if it does not exist on the user's computer. The user must run an `run_app()` in the `scrap.R` file to properly see the font loaded.

Now that the x-axis is in place, the y-axis needs to be added. This will follow much of the same steps as creating the x-axis, but with some important distinctions that make a big difference.

### Add Y-Axis Dimension

At the bottom of `viz_gold_base.js`, create two bindings to define the min and max values.

```{js, eval = FALSE}
// Define y-axis min and max values
const y_min = 0;
const y_max = 25000000;
```

Next, create a binding for the y-axis dimensions. This should go below your `y_min` and `y_min` in `viz_gold_base.js`.

```{js, eval = FALSE}
// Define dimensions for y-axis
const y_dimension = d3.scaleLinear()
  .domain([y_min, y_max])
  .range([height - margin.bottom, margin.top]);
```

A few things about the script above:

-   `range` defines the placement of the y-axis in relation to the overall SVG using `height` instead of `width`. Both x-and-y-axis use `margin`.

-   `scaleLinear` is used when the axis relates to linear numeric value, but D3 uses other functions for other data types. This is unlike `x_dimension`, which used `scaleUtc`.

-   Normally, most D3 scripts in tutorials will refer to this simple as `y`. I chose `y_dimension` because for the binding name to make it more explicit.

### Add Y-Axis Aesthetics

Just like with the x-axis, the y-axis will not display until we define more aesthetic considerations.

Below `y_dimension` in the `viz_gold_base.js` file, create a new binding for `y_aesthetic`.

```{js, eval = FALSE}
// Define aesthetics for y-axis  
const y_aesthetic = d3.axisLeft(y_dimension)
  .ticks(5)
  .tickFormat(d => "$" + (d / 1000000) + "M");
```

A few things to note about the script above:

-   Unlike with `x_aesthetic`, which used `axisBottom`, the `y_aesthetic` uses `axisLeft`.

<!-- -->

-   `ticks` is used to define the number of tick marks. The default is far more, but to keep the visualization cleaner looking, we'll use only five. This is different than `x_aesthetic`, which used the default number of tick marks.

-   Much like `x_aesthetic`, `y_aesthetic` uses `tickFormat` to dictate how the tick marks should appear. In this example, we added a "\$" sign to indicate we're looking at currency values. We also divided the amount by one million to make it easier to read, abbreviating it with "M".

Next, the `y_aesthetic` binding needs to be applied to a "g" tag that is appended to the SVG.

```{js, eval = FALSE}
// Append y-axis to SVG
svg.append("g")
  .attr("transform", `translate(${margin.left}, 0)`)
  .attr("class", "axis")
  .call(y_aesthetic);
```

A few things about the script above:

-   The CSS class `axis` is already added to the "g" element using `attr`.
-   The `transform` attribute is different from the x-axis. The x-axis used a combination of `margin.bottom` and `height` to decide where the axis should be shifted. This one uses only `margin.left`. Since the `y_dimension` does not pass instructions relating to the x-axis, our axis needs additional instruction about where to place the "g" element. We would like it to be placed at `margin.left` because the left margin is exactly where we want our axis tick labels appearing.

You can now preview this in your Viewer window. Run `plot_gold_viz_bar(jGold)` to see the y-aaxis appear.

### Add Y-Axis Lines

The mockup we are building towards with our visualization has five reference lines starting from each tick mark.

The best way to add this is simply to add a second "g" tag and a binding similar to `y_aesthetic`.

```{js, eval = FALSE}
// Define aesthetics for y-axis' subtle grid lines
const y_gridline = d3.axisLeft(y_dimension)
  .ticks(5)
  .tickFormat("")
  .tickSize(-(width - margin.right - margin.left));
```

This may look like `y_aesthetic`, but there are some key differences:

-   `tickFormat` is blank, because we want no additional tick labels to appear.

-   `tickSize` uses `width`, `margin.right`, and `margin.right` to know that the tick marks should extend from one side of the visualization towards the other side.

Now that `y_gridline` is defined, it can be passed to another `append` script.

```{js, eval = FALSE}
// Append y-axis' grid lines to SVG  
svg.append("g")
  .attr("class", "axis")
  .attr("transform", `translate(${margin.left}, 0)`)
  .style("opacity", .10)
  .call(y_gridline);
```

Much like before, this looks similar to how `y_aesthetics` was applied before. The key difference is `style("opacity", .10)`, which makes the line much lighter compared to `y_aesthetics` y-axis.

You can now preview this in your Viewer window. Run `plot_gold_viz_bar(jGold)` to see the y-aaxis appear.

### Checkpoint!

We covered a lot in Section One. `x_dimension` and `y_dimension` are fundamental to the next sections. To ensure you are up-to-date on the tutorial, I suggest copy-and-pasting the following into your `plot_base.js` file.

```{js, eval = FALSE}
 // Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};

// Define x-axis min and max values
const x_min = new Date("1892-10-01");
const x_max = new Date("1893-12-01");  
 
// Define dimension for x-axis
const x_dimension = d3.scaleUtc()
  .domain([x_min, x_max])
  .range([margin.left, width - margin.right]);
  
// Define aesthetics for x-axis
const x_aesthetic = d3.axisBottom(x_dimension)
  .tickFormat(d3.utcFormat("%y %b"));

// Append x-axis to SVG
svg.append("g")
  .attr("transform", `translate(0, ${height - margin.bottom})`)
  .attr("class", "axis")
  .call(x_aesthetic);
  
// Define y-axis min and max values
const y_min = 0;
const y_max = 25000000;

// Define dimensions for y-axis
const y_dimension = d3.scaleLinear()
  .domain([y_min, y_max])
  .range([height - margin.bottom, margin.top]);
 
// Define aesthetics for y-axis  
const y_aesthetic = d3.axisLeft(y_dimension)
  .ticks(5)
  .tickFormat(d => "$" + (d / 1000000) + "M");
  
// Append y-axis to SVG
svg.append("g")
  .attr("transform", `translate(${margin.left}, 0)`)
  .attr("class", "axis")
  .call(y_aesthetic);
  
// Define aesthetics for y-axis' subtle grid lines
const y_gridline = d3.axisLeft(y_dimension)
  .ticks(5)
  .tickFormat("")
  .tickSize(-(width - margin.right - margin.left));
    
// Append y-axis' grid lines to SVG  
svg.append("g")
  .attr("class", "axis")
  .attr("transform", `translate(${margin.left}, 0)`)
  .style("opacity", .10)
  .call(y_gridline);
  
```

## Section Two: Modularize Code

The code found in `viz_gold_base.js` is already getting long, and that is before we added any visualizations to it!

That's not surprising considering how precise D3 requires its code to be to function. However, it makes it much more challenging to read and maintain.

I actually suspect that much of the struggle to learn D3 is the fact that its code gets so long.

Thankfully, we can modularize the code.

### How Modularization Works

Depending on how far along you are in R, you may have found that your projects benefit from reducing long scripts into smaller, more specific scripts.

Not only does that make it easier to break the code down into more manageable parts, it also makes it easier to **re-use** code in different places. This will be important because, other than the line and bar portion of our plots, everything else our data visualization will be the same!

Note: when I use the term "modularize" in D3, I don't mean it in the same since as a Shiny module. There's no need to use namespaces here.

### Create Files

Within the `D3/` directory on your Posit.Cloud project, create the following files:

-   `viz_gold_x_dimension.js`

-   `viz_gold_y_dimension.js`

-   `viz_gold_x_axis.js`

-   `viz_gold_y_axis.js`

### Move Axis Dimensions

Within `viz_gold_x_dimensions.js`, provide the following scripts:

```{js, eval = TRUE}
function viz_gold_x_dimension(margin) {

}
```

This defines a function called `viz_gold_x_dimension`, which accepts `margin` as a parameter. Parameters don't always have to be explicitedly defined, but it's better for readability.

Within the `viz_gold_dimension` function, move the following code from `viz_gold_base.js`. Also, make sure to return `x_dimension`.

```{js, eval = FALSE}
function viz_gold_x_dimension(margin, width) {
  
  // Define x-axis min and max values
  const x_min = new Date("1892-10-01");
  const x_max = new Date("1893-12-01");  
   
  // Define dimension for x-axis
  const x_dimension = d3.scaleUtc()
    .domain([x_min, x_max])
    .range([margin.left, width - margin.right]);
  
  return x_dimension;
  
}
```

A few things to note about the above function:

-   `margin` and `width` are parameters because they are used to create the `range`. These parameters don't always need to be explicitly stated within the function, but it improves readability.

-   `x_min` and `x_max` could become parameters, which would be useful in an R Shiny application. That is beyond the scope of this tutorial though.

-   `return x_dimension` ensures that the script returns the `x_dimension` binding, which will be used as a parameter in a variety of the other functions we will create.

Now that there is a function (or module) that produces `x_dimension`, we can simplify our code found in `viz_gold_base.js`.

Right below the `margin` binding, replace code relating to `x_dimension`.

```{js, eval = FALSE}
 // Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};

// Define dimensions
const x_dimension = viz_gold_x_dimension(margin, width);
```

Next, `y_dimension` needs to be moved to `viz_gold_y_dimension.js`.

```{js, eval = FALSE}
function viz_gold_y_dimension(margin, height) {
  
  // Define y-axis min and max values
  const y_min = 0;
  const y_max = 25000000;
  
  // Define dimensions for y-axis
  const y_dimension = d3.scaleLinear()
    .domain([y_min, y_max])
    .range([height - margin.bottom, margin.top]);
    
  return y_dimension;
  
}
```

Notice that the function above does not use `width` like `viz_gold_x_dimension`. It uses `height` instead.

Next, replace code relating to the x-axis' dimensions with the new `viz_gold_y_dimension` function.

```{js, eval = FALSE}
 // Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};

// Define dimensions
const x_dimension = viz_gold_x_dimension(margin, width);
const y_dimension = viz_gold_y_dimension(margin, height);
```

Now that the dimension-related code is modularized, we can work on the aesthetics. You can test that everything works fine by running `plot_gold_viz_bar(jGold)`.

### Move Axis Aesthetics

Within `viz_gold_x_axis.js`, move the code relating to the x-axis' aesthetics.

```{js, eval = FALSE}
function viz_gold_x_axis(svg, x_dimension, margin, height) {

  // Define aesthetics for x-axis
  const x_aesthetic = d3.axisBottom(x_dimension)
    .tickFormat(d3.utcFormat("%y %b"));
  
  // Append x-axis to SVG
  svg.append("g")
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .attr("class", "axis")
    .call(x_aesthetic);
  
}
```

A few things to note about the code above:

-   `x_dimension`, `margin`, and `height` are parameters, because they are used throughout the code contained inside.

-   There is no need to return anything within the function. `svg.append("g")` is modifying the SVG that is presented to the visualization's viewer.

Within `viz_gold_y_axis.js`, move the code relating to the y-axis' aesthetics.

```{js, eval = FALSE}
function viz_gold_y_axis(svg, y_dimension, margin, width) {
  
  // Define aesthetics for y-axis  
  const y_aesthetic = d3.axisLeft(y_dimension)
    .ticks(5)
    .tickFormat(d => "$" + (d / 1000000) + "M");
    
  // Append y-axis to SVG
  svg.append("g")
    .attr("transform", `translate(${margin.left}, 0)`)
    .attr("class", "axis")
    .call(y_aesthetic);
    
  // Define aesthetics for y-axis' subtle grid lines
  const y_gridline = d3.axisLeft(y_dimension)
    .ticks(5)
    .tickFormat("")
    .tickSize(-(width - margin.right - margin.left));
      
  // Append y-axis' grid lines to SVG  
  svg.append("g")
    .attr("class", "axis")
    .attr("transform", `translate(${margin.left}, 0)`)
    .style("opacity", .10)
    .call(y_gridline);
    
}
```

Now that the two aesthetic functions are created, `viz_gold_base.js` can be simplified further.

```{js, eval = FALSE}
 // Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};

// Define dimensions
const x_dimension = viz_gold_x_dimension(margin, width);
const y_dimension = viz_gold_y_dimension(margin, height);
  
// Generate the two axis on SVG
viz_gold_x_axis(svg, x_dimension, margin, height);
viz_gold_y_axis(svg, y_dimension, margin, width);
```

Notice in the code above that `viz_gold_x_axis` and `viz_gold_y_axis` are not within a binding. It's not necessary for those two functions, because they are simply modifying the SVG to show the axis. They will not serve as parameters to use elsewhere.

You can run `plot_gold_viz_bar(jGold)` to see an updated preview.

### Could the Axis Aesthetics Be Placed with Dimensions?

You may be wondering... why not include the aesthetics related code within one function, such as with `viz_gold_x_dimension`?

That would work. However, one benefit to modularizing code is that you create more clarity on a function's purpose.

`viz_gold_x_dimension` and `viz_gold_y_dimension` have "dimension" in their name, so it's clear that they create and return the dimensions for the visualization. These dimensions will be used as a parameter in future functions we'll produce.

That said, you can choose to include the aesthetics within those functions if you want to, so long as the functions both return and are binded to `x_dimension` and `y_dimension`.

### Checkpoint!

A lot has happened this section. Things are easy to miss. Maybe one pesky `)` was missing or a comma is out of place.

Run through the tabs below to copy-and-paste the code we've produced so far.

::: panel-tabset
## viz_gold_base.js

```{js, eval = FALSE}
 // Define the margins
const margin = {top: 100, bottom: 75, right: 75, left: 75};

// Define dimensions
const x_dimension = viz_gold_x_dimension(margin, width);
const y_dimension = viz_gold_y_dimension(margin, height);
  
// Generate the two axis on SVG
viz_gold_x_axis(svg, x_dimension, margin, height);
viz_gold_y_axis(svg, y_dimension, margin, width);
```

## viz_gold_x_dimension.js

```{js, eval = FALSE}
function viz_gold_x_dimension(margin, width) {
  // Define x-axis min and max values
  const x_min = new Date("1892-10-01");
  const x_max = new Date("1893-12-01");  
  
  // Define dimension for x-axis
  const x_dimension = d3.scaleUtc()
  .domain([x_min, x_max])
  .range([margin.left, width - margin.right]);
  
  return x_dimension;
}
```

## viz_gold_y_dimension.js

```{js, eval = FALSE}
function viz_gold_y_dimension(margin, height) {
  
  // Define y-axis min and max values
  const y_min = 0;
  const y_max = 25000000;
  
  // Define dimensions for y-axis
  const y_dimension = d3.scaleLinear()
    .domain([y_min, y_max])
    .range([height - margin.bottom, margin.top]);
    
  return y_dimension;
  
}
```

## viz_gold_x_axis.js

```{js, eval = FALSE}
function viz_gold_x_axis(svg, x_dimension, margin, height) {

  // Define aesthetics for x-axis
  const x_aesthetic = d3.axisBottom(x_dimension)
    .tickFormat(d3.utcFormat("%y %b"));
  
  // Append x-axis to SVG
  svg.append("g")
    .attr("transform", `translate(0, ${height - margin.bottom})`)
    .attr("class", "axis")
    .call(x_aesthetic);
  
}
```

## viz_gold_y_axis.js

```{js, eval = FALSE}
function viz_gold_y_axis(svg, y_dimension, margin, width) {
  
  // Define aesthetics for y-axis  
  const y_aesthetic = d3.axisLeft(y_dimension)
    .ticks(5)
    .tickFormat(d => "$" + (d / 1000000) + "M");
    
  // Append y-axis to SVG
  svg.append("g")
    .attr("transform", `translate(${margin.left}, 0)`)
    .attr("class", "axis")
    .call(y_aesthetic);
    
  // Define aesthetics for y-axis' subtle grid lines
  const y_gridline = d3.axisLeft(y_dimension)
    .ticks(5)
    .tickFormat("")
    .tickSize(-(width - margin.right - margin.left));
      
  // Append y-axis' grid lines to SVG  
  svg.append("g")
    .attr("class", "axis")
    .attr("transform", `translate(${margin.left}, 0)`)
    .style("opacity", .10)
    .call(y_gridline);
    
}
```
:::

## Section Three: Visualization Elements (Shapes)

Most of the work so far has related to dimensions and producing visual representations of the axis. One thing that's missing, as I'm sure you noticed, is that there is no visual elements of the data. D3 often refers to these as shapes.

### How Shapes Work

Adding shapes to a D3 visualization is often a case of the "it depends!" This is where modern LLM tools, such as ChatGPT, can be helpful in asking for examples.

With that said, one important distinction to make early on when adding shapes is: are you adding just **one** shape or **multiple**?

This changes how you append shapes to your SVG, and how you attach data. It also changes the order of operations.

For example, our bar graph will be *multiple* shapes for each data point, because there are multiple bars. A line (D3 calls it a "path") is *one* shape, whose outline is decided by the data points.

### Add Bar Graph Module

Within the `D3/` directory, create a new file called `gold_bar.js`

Within `bar.js`, define a function called `bar`.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {

}
```

A few things to note about the code above:

-   `data` is a parameter that hasn't been added yet. It is actually `jGold`, which is passed by `r2d3`'s `data` parameter. You can see this in `plot_gold_viz_line.R` and `plot_gold_viz_bar.R`.

-   `x_dimension` and `y_dimension` are included as params, but nothing related to `x_aesthetic` and `y_aesthetic` are. That's because the visual representation on our plot contributes nothing functional to the sizing of the bars.

Next, add `gold_bar` to the bottom of `viz_gold_base`. This will make it easier to preview along the way with `plot_gold_vize_line` (R-function).

```{js, eval = FALSE}
// Add shapes
gold_bar(svg, margin, data, x_dimension, y_dimension)
```

Next, attach data to the SVG and append a "rect" within the `gold_bar` function.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
  
}
```

The code above is one of the least intuitive aspects relating to D3. I wish it were different, because it does make things more complicated (for the developer) to understand.

A few notes to help clarity what's happening here:

-   The code uses `selectAll("gold-bar")` searches for a tag labeled "gold-bar" that is within the SVG. This tag does not exist yet. 

-   `.data(data)`attempts to attach your data to the non-existent "gold-bar." Since it doesn't exist, the developer needs to enter a new tag using `enter`.

-   `append("rect")` appends a rectangle shape (which is what the bars are) to the SVG and will do so with the data. We haven't provided any instructions on how the shape will use such data, so it will not appear yet.

What's most frustrating is that this is the common approach when you are attempting to append multiple shapes. It won't happen this way when you append a single shape.

Now that we have our data and the type of shapes we want to append, it's time to decide the starting point for the shape.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x_dimension(new Date(d.date)))
    .attr("y", d => y_dimension(d.gold_in_cash));
    
}
```

A few notes about the code above:

-   `attr("x", ...)` and `attr("y", ...)` is defining the starting point of each rectangle on the plot.

-   For `attr("x", ...)`, the `x_dimension` is used as a function (which it is) to determine where the starting point on the X-axis the rectangle should start.

-   For `attr("y", ...)`, the `y_dimension` is used as a function to determine where the starting point on the Y-axis.

-   Recall that `x_dimension` and `y_dimension` both provide instructions on where to start the axis on the plot and the length of the axis, based on margin, height, and width.

-   `d => x_dimension(...)` and `d => y_dimension(...)` are passing `data` (which is really our `jGold` JSON file) to find the placement with respect to axis size, margin, height, and width

-   `x_dimenstion(new Date(d.date))` determines where on the SVG a point associated with a specific date point found in `data` (i.e., `jGold`).

-   `y_dimension(d.gold_in_cash)` determines where on the SVG a rectangle should start based on each `gold_in_cash`.

The code above only defined the starting point. 

Next, we need to define how wide the bars are and how tall (or rather, how "low") they should be. For now, let's define the `width` and `height` as 10 for now.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x_dimension(new Date(d.date)))
    .attr("y", d => y_dimension(d.gold_in_cash))
    .attr("width", 10)
    .attr("height", 10)
    ;
    
}
```

Go ahead and render the visualization using `plot_gold_viz_bar(jGold)` (R-function). You may notice that the starting point for the `x` is the actual data point. So when `height` is set to 10, it merely goes down horizontally 10 points. The same thing with `width`, only vertically.

We need to extend the bar from the data point of interest (i.e., `gold_in_cash`) all the way to the x-axis. That makes the height dependent on the parameters `height`, `margin.bottom`, and `y_dimension` to properly size.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x_dimension(new Date(d.date)))
    .attr("y", d => y_dimension(d.gold_in_cash))
    .attr("width", 10)
    .attr("height", d => height - margin.bottom - y_dimension(d.gold_in_cash))
    ;
    
}
```

Now re-render your plot with `plot_gold_viz_bar(jGold)`. Notice that the bars are off center on the x-axis. How could this be resolved? Well, first ask whether it's a `width` issue or a `x` placement issue?

It's a placement issue.

We need to shift the bar to the left, but also take into account it's width. The easiest way to do that is to make `bar_width` a binding that can be called by both.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  const bar_width = 10
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x_dimension(new Date(d.date)) - (bar_width / 2))
    .attr("y", d => y_dimension(d.gold_in_cash))
    .attr("width", bar_width)
    .attr("height", d => height - margin.bottom - y_dimension(d.gold_in_cash));
    
}
```

A few things to notice about the code above:

-   `bar_width` is made into a binding, since it's used in two different places.

-   `(bar_width / 2)` is *not* placed inside `x_dimension`. The reason is that `x_dimension` translate the data `d.date` into a point on the SVG. Since `bar_width / 2` is already translated into such a point, it does not need to be run through `x_dimension`.

Now re-render your plot with `plot_gold_viz_bar(jGold)`. Notice how the bars are centered.

The bars are skinny though. We could make them 20 or 30 points wide. Go ahead and try, if you'd like.

However, that doesn't size well based on the size of the viewer. One of the great advantages of D3 is how responsive it is to different screen sizes.

You can modify `bar_width` further to take into account the size of the screen.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  const bar_width = (width - margin.left - margin.right) / 20;
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("x", d => x_dimension(new Date(d.date)) - (bar_width / 2))
    .attr("y", d => y_dimension(d.gold_in_cash))
    .attr("width", bar_width)
    .attr("height", d => height - margin.bottom - y_dimension(d.gold_in_cash));
    
}
```

Now re-render your plot with `plot_gold_viz_bar(jGold)`. Notice how the bars change width based on screen size.

Finally, we need to add color to our bars. Thankfully, we have a CSS class defined in our `.css` file.

Right after `append("rect")`, add the CSS class `gold-bar` as an attribute.

```{js, eval = FALSE}
function gold_bar(svg, margin, data, x_dimension, y_dimension) {
  
  const bar_width = (width - margin.left - margin.right) / 20;
  
  svg.selectAll("gold-bar")
    .data(data)
    .enter()
    .append("rect")
    .attr("class", "gold-bar")
    .attr("x", d => x_dimension(new Date(d.date)) - (bar_width / 2))
    .attr("y", d => y_dimension(d.gold_in_cash))
    .attr("width", bar_width)
    .attr("height", d => height - margin.bottom - y_dimension(d.gold_in_cash));
    
}
```

The bars on the plot should now be orange.

### Add Line Graph Module

sdag

### Call Modules with Control Flow

sgd

### Checkpoint!

asdga

## Section Three: Text

### How Text Works

adsg

### Add Header Module

asdg

### Add Source Module

asd

### Add Y-Axis Label Module (Optional)

This is redundant since our plot's header has the name in it, but sd

### Checkpoint!

asdf

## Section Four: Transitions & Animations

### How Transitions Work

asdg

### Add Transition to Headers

Easy way to get started

### Add Transition to Bars

asdg

### Add Transition to Line

This one is provided for you.

### Checkpoint!

ad

## Conclusion

dsaf
